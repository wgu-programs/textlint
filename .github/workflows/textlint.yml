name: Run TextLint Rules

on:
  repository_dispatch:
    types: [run-textlint]

jobs:
  textLint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install --save-dev textlint jq
      - name: Install textlint rules
        run: |
          echo '${{ toJson(github.event.client_payload.rules) }}' > rules.json
          jq -r '.[]' rules.json | xargs -I {} npm install --save-dev {}
      - name: Create .textlintrc file
        run: |
          rules=$(jq -r '.[] | "\"" + . + "\": true,"' rules.json | tr '\n' ' ' | sed 's/, $//')
          echo "{ \"rules\": { $rules } }" > .textlintrc
      - name: Create temporary file with input text
        run: echo "${{ github.event.client_payload.text }}" > temp.md
      - name: Run textlint
        id: textlint
        run: |
          npx textlint temp.md || echo "Errors found"
      - name: Parse textlint output
        id: parse
        run: |
          if npx textlint temp.md --format json > output.json; then
            echo "result=TRUE" >> $GITHUB_ENV
          else
            errors=$(cat output.json | jq -c .)
            echo "result=$errors" >> $GITHUB_ENV
          fi
      - name: Output result
        run: echo "${{ env.result }}"
      - name: Send webhook notification
        if: always() # Ensure this step runs regardless of success or failure of previous steps
        run: |
          curl -X POST "${{ github.event.client_payload.webhook }}" \
          -H 'Content-Type: application/json' \
          -d '{
            "status": "${{ job.status }}",
            "result": "${{ env.result }}"
          }'
